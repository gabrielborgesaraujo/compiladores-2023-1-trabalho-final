(program (declaration (funDecl fun (function getSum ( (parameters a , b) ) (block { (declaration (statement (returnStmt return (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary a)))) + (factor (unary (call (primary b))))))))))) ;))) })))) (declaration (varDecl var sum = (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary getSum) ( (arguments (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary 4))))))))))) , (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary 5)))))))))))) ))))))))))) ;)) (declaration (statement (ifStmt if ( (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary sum))))) > (term (factor (unary (call (primary 10))))))))))) ) (statement (block { (declaration (statement (printStmt print (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary "yes"))))))))))) ;))) })) else (statement (ifStmt if ( (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary sum))))) > (term (factor (unary (call (primary 20))))))))))) ) (statement (block { (declaration (statement (printStmt print (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary "maybe"))))))))))) ;))) })) else (statement (block { (declaration (statement (printStmt print (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary "no"))))))))))) ;))) }))))))) <EOF>)